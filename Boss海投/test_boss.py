# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestBoss():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def wait_for_window(self, timeout = 2):
    time.sleep(round(timeout / 1000))
    wh_now = self.driver.window_handles
    wh_then = self.vars["window_handles"]
    if len(wh_now) > len(wh_then):
      return set(wh_now).difference(set(wh_then)).pop()
  
  def test_boss(self):
    # Test name: Boss
    # Step # | name | target | value
    # 1 | open | /web/geek/job?query=java&city=101020100&experience=102 | 
    self.driver.get("https://www.zhipin.com/web/geek/job?query=java&city=101020100&experience=102")
    # 2 | setWindowSize | 1552x840 | 
    self.driver.set_window_size(1552, 840)
    # 3 | click | css=.job-card-wrapper:nth-child(1) .job-area | 
    self.vars["window_handles"] = self.driver.window_handles
    # 4 | storeWindowHandle | root | 
    self.driver.find_element(By.CSS_SELECTOR, ".job-card-wrapper:nth-child(1) .job-area").click()
    # 5 | selectWindow | handle=${win1674} | 
    self.vars["win1674"] = self.wait_for_window(2000)
    # 6 | click | linkText=继续沟通 | 
    self.vars["root"] = self.driver.current_window_handle
    # 7 | selectWindow | handle=${root} | 
    self.driver.switch_to.window(self.vars["win1674"])
    # 8 | selectWindow | handle=${win1674} | 
    self.driver.find_element(By.LINK_TEXT, "继续沟通").click()
    # 9 | close |  | 
    self.driver.switch_to.window(self.vars["root"])
    # 10 | selectWindow | handle=${root} | 
    self.driver.switch_to.window(self.vars["win1674"])
    # 11 | click | css=.job-card-wrapper:nth-child(2) .job-card-left | 
    self.driver.close()
    # 12 | selectWindow | handle=${win9025} | 
    self.driver.switch_to.window(self.vars["root"])
    # 13 | click | linkText=立即沟通 | 
    self.vars["window_handles"] = self.driver.window_handles
    # 14 | click | css=.btn-outline | 
    self.driver.find_element(By.CSS_SELECTOR, ".job-card-wrapper:nth-child(2) .job-card-left").click()
    # 15 | close |  | 
    self.vars["win9025"] = self.wait_for_window(2000)
    # 16 | selectWindow | handle=${root} | 
    self.driver.switch_to.window(self.vars["win9025"])
    # 17 | mouseOver | linkText=公司 | 
    self.driver.find_element(By.LINK_TEXT, "立即沟通").click()
    # 18 | runScript | window.scrollTo(0,400) | 
    self.driver.find_element(By.CSS_SELECTOR, ".btn-outline").click()
    # 19 | click | css=.job-card-wrapper:nth-child(3) .job-area | 
    self.driver.close()
    # 20 | selectWindow | handle=${win2383} | 
    self.driver.switch_to.window(self.vars["root"])
    # 21 | click | linkText=立即沟通 | 
    element = self.driver.find_element(By.LINK_TEXT, "公司")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    # 22 | click | css=.btn-outline | 
    self.driver.execute_script("window.scrollTo(0,400)")
    # 23 | close |  | 
    self.vars["window_handles"] = self.driver.window_handles
    # 24 | selectWindow | handle=${root} | 
    self.driver.find_element(By.CSS_SELECTOR, ".job-card-wrapper:nth-child(3) .job-area").click()
    self.vars["win2383"] = self.wait_for_window(2000)
    self.driver.switch_to.window(self.vars["win2383"])
    self.driver.find_element(By.LINK_TEXT, "立即沟通").click()
    self.driver.find_element(By.CSS_SELECTOR, ".btn-outline").click()
    self.driver.close()
    self.driver.switch_to.window(self.vars["root"])
  
